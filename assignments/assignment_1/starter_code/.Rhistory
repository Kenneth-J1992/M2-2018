V(g)$office <- attributes$office
V(g)$practice <- attributes$practice
E(g)$type <- "friendship"
g
g$type
?edge_density
?edge_densit
plot(g,
vertex.size = degree(g),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = degree(g),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = degree(g) / 2,
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = 1+ sqrt(degree(g)),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = 1+ sqrt(degree(g)),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.shape = as.numeric(factor(V(g)$gender)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = 1+ sqrt(degree(g)),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
)
plot(g,
layout= layout_with_fr(g),
vertex.size = 1+ sqrt(degree(g)),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
edge.arrow.size = 0.5
)
plot(g,
layout= layout_with_fr(g),
vertex.label = degree(g),
vertex.size = 1+ sqrt(degree(g)),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
edge.arrow.size = 0.5
)
?degree
plot(g,
layout= layout_with_fr(g),
vertex.label = degree(g, mode = "in"),
vertex.size = 1+ sqrt(degree(g, mode = "in")),
vertex.color = as.numeric(factor(V(g)$office)),
vertex.label = NA,
edge.arrow.size = 0.5
)
?edge_densit
# Get density of a graph
edge_density(g)
# Get the diameter of the graph g
diameter(g, directed = TRUE)
# Get the average path length of the graph g
mean_distance(g, directed = TRUE)
?transitivity
# Transistivity
transitivity(g, type ="globalundirected")
?reciprocity
# Transistivity
transitivity(g, type ="globalundirected")
# recipricity
reciprocity(g)
View(attributes)
assortativity(g, V(G)$tenure, directed = TRUE)
assortativity(g, V(g)$tenure, directed = TRUE)
?assortativity
assortativity(g, V(g)$tenure)
V(g)$tenure
View(attributes)
View(attributes)
V(g)$tenure <- attributes$tenure
assortativity(g, V(g)$tenure, directed = TRUE)
?assortativity.degree
assortativity(g, V(g)$school == "Harvard, Yale", directed = TRUE)
V(g)$school == "Harvard, Yale"
V(g)$name <- 1:vcount(g)
V(g)$gender <- attributes$gender
V(g)$office <- attributes$office
V(g)$age <- attributes$age
V(g)$tenure <- attributes$tenure
V(g)$practice <- attributes$practice
V(g)$school <- attributes$school
E(g)$type <- "friendship"
assortativity(g, V(g)$school == "Harvard, Yale", directed = TRUE)
assortativity.degree(g, directed = TRUE)
assortativity(g, degree(g, mode = "in"), directed = TRUE)
?erdos.renyi.game
gsize(g)
transitivity(g, type ="localdirected") / mean_distance(g, directed = TRUE)
# Transistivity
transitivity(g, type ="local")
# Transistivity
transitivity(g, type ="global")
transitivity(g, type ="global") / mean_distance(g, directed = TRUE)
g.r <- erdos.renyi.game(n = gorder(g), p.or.m = gsize(g), type = "gnp")
g.r <- erdos.renyi.game(n = gorder(g),
p.or.m = gsize(g),
type = "gnm"
directed = TRUE,
g.r <- erdos.renyi.game(n = gorder(g),
p.or.m = gsize(g),
type = "gnm",
directed = TRUE,
loops = FALSE)
plot(g.r)
# Generate 1000 random graphs
g.l <- vector('list',1000)
for(i in 1:1000){
g.l[[i]] <- erdos.renyi.game(n = gorder(g),
p.or.m = gsize(g),
type = "gnm",
directed = TRUE,
loops = FALSE)
}
# Calculate average path length of 1000 random graphs
dist.r <- unlist(lapply(g.l, mean_distance, directed = FALSE))
# Calculate average path length of 1000 random graphs
dist.r <- unlist(lapply(g.l, mean_distance, directed = TRUE))
cc.r <- unlist(lapply(g.l, transitivity, directed = TRUE))
cc.r <- unlist(lapply(g.l, transitivity, type ="global"))
cc.r <- unlist(lapply(g.l, reciprocity, directed = TRUE))
cc.r <- unlist(lapply(g.l, reciprocity))
# Calculate average path length of 1000 random graphs
dist.r <- unlist(lapply(g.l, mean_distance, directed = TRUE))
cc.r <- unlist(lapply(g.l, transitivity, type ="global"))
rp.r <- unlist(lapply(g.l, reciprocity))
rp.r
# Generate 1000 random graphs
g.l <- vector('list',1000)
for(i in 1:1000){
g.l[[i]] <- erdos.renyi.game(n = gorder(g),
p.or.m = gsize(g),
type = "gnm",
directed = TRUE,
loops = FALSE)
}
stats.friend -> tibble(density = edge_density(g),
diameter = diameter(g, directed = TRUE),
reciprocity = reciprocity(g),
reciprocity.score = mean(reciprocity(g) > rp.r),
distance = mean_distance(g, directed = TRUE),
distance.score = mean(mean_distance(g, directed = TRUE) > dist.r),
clustering = transitivity(g, type ="global"),
clustering.score = mean(transitivity(g, type ="global")  > cc.r),
small.world = mean(transitivity(g, type ="global")  > cc.r) / mean(mean_distance(g, directed = TRUE) > dist.r) )
stats.friend <- tibble(density = edge_density(g),
diameter = diameter(g, directed = TRUE),
reciprocity = reciprocity(g),
reciprocity.score = mean(reciprocity(g) > rp.r),
distance = mean_distance(g, directed = TRUE),
distance.score = mean(mean_distance(g, directed = TRUE) > dist.r),
clustering = transitivity(g, type ="global"),
clustering.score = mean(transitivity(g, type ="global")  > cc.r),
small.world = mean(transitivity(g, type ="global")  > cc.r) / mean(mean_distance(g, directed = TRUE) > dist.r) )
stats.friend
?biblioNetwork
nw2m <- tibbte(people = c("Daniel", "Roman", "SDS Student1", "SDS Student1", "Leroy"),
clubs = c("Kitesurfing", "Yoga", "Kitesurfing", "Yoga", "Knitting"))
nw2m <- tibble(people = c("Daniel", "Roman", "SDS Student1", "SDS Student1", "Leroy"),
clubs = c("Kitesurfing", "Yoga", "Kitesurfing", "Yoga", "Knitting"))
nw2m
nw1m_clubs <- nw2m %*% t(nw2m)
nw2m <- tibble(people = c("1", "2", "3", "4", "5"),
clubs = c("1", "2", "1", "2", "2"))
nw2m
nw1m_clubs <- nw2m %*% t(nw2m)
nw2m <- matrix(people = c("1", "2", "3", "4", "5"),
clubs = c("1", "2", "1", "2", "2"))
nw2m <- tibble(people = c("1", "2", "3", "4", "5"),
clubs = c("1", "2", "1", "2", "2"))
nw2m
nw1m_clubs <- as.matrix(nw2m) %*% t(as.matrix(nw2m))
as.matrix(nw2m)
t(as.matrix(nw2m))
as.matrix(nw2m) %*% t(as.matrix(nw2m))
t(as.matrix(nw2m))
nw1m_clubs <- as.matrix(nw2m) %*% t(as.matrix(nw2m))
nw1m_clubs
as.matrix(nw2m) %*% t(as.matrix(nw2m))
t(as.matrix(nw2m))
as.matrix(nw2m)
?as.matrix
nw2m <- tibble(people = c(1, 2, 3, 4, 5),
clubs = c(1, 2, 1, 2, 2))
nw2m
nw1m_clubs <- as.matrix(nw2m) %*% t(as.matrix(nw2m))
nw1m_clubs
nw2m <- tibble(people = factor(c(1, 2, 3, 4, 5)),
clubs = factor(c(1, 2, 1, 2, 2)))
nw2m
nw1m_clubs <- as.matrix(nw2m) %*% t(as.matrix(nw2m))
rm(list=ls())
articles <- readRDS("../input/biblio/publications.RDS")
articles %<>%
select(SR, AU, TI, JI, PY, AU_UN, DE, TC, NR, CR) %>%
rename(article = SR,
author = AU,
title = TI,
journal = JI,
year = PY,
affiliation = AU_UN,
keywords = DE,
citations = TC,
references = NR,
reference.list = CR)
articles %>%
arrange(desc(citations)) %>%
head(20)
articles[1, "reference.list"]
citation.el <- data.table(article = articles$article,
str_split_fixed(articles$reference.list, ";", max(articles$references, na.rm=T)))
citation.el <- melt(citation.el, id.vars = "article")[, variable:= NULL][value!=""]
citation.el %<>%
rename(reference = value) %>%
arrange(article,reference)
head(citation.el)
library(Matrix)
mat <- spMatrix(nrow=length(unique(citation.el$article)),
ncol=length(unique(citation.el$reference)),
i = as.numeric(factor(citation.el$article)),
j = as.numeric(factor(citation.el$reference)),
x = rep(1, length(as.numeric(citation.el$article))) )
row.names(mat) <- levels(factor(citation.el$article))
colnames(mat) <- levels(factor(citation.el$reference))
str(mat)
mat.art <- tcrossprod(mat)
mat.ref <- tcrossprod(t(mat))
rm(mat)
require(igraph)
g <- graph_from_adjacency_matrix(mat.art,
mode = "undirected",
weighted = T,
diag = F) ; rm(mat.art)
g <- simplify(g,
remove.multiple = T,
remove.loops = T,
edge.attr.comb = "sum")
temp <- tibble(article = V(g)$name) %>%
left_join(articles %>% select(article, year, citations, references), by = "article")
g <- set_vertex_attr(g, "year", value = temp$year)
g <- set_vertex_attr(g, "citations", value = temp$citations)
g <- set_vertex_attr(g, "references", value = temp$references)
rm(temp)
g
g <- delete.edges(g, E(g)[weight < quantile(weight, 0.1, na.rm = T)])
g <- delete.vertices(g, strength(g) == 0)
g <- delete.vertices(g, strength(g) < quantile(strength(g), 0.25, na.rm = T) )
g
head(M)
M <- convert2df(readFiles("../input/biblio/biblio_nw1.txt"),
dbsource = "isi",
format = "plaintext")
rm(list = ls())
require(bibliometrix)
?bibliometrix
M <- convert2df(readFiles("../input/biblio/biblio_nw1.txt"),
dbsource = "isi",
format = "plaintext")
head(M)
results <- biblioAnalysis(M)
summary(results,
k = 20,
pause = F,
width = 130)
CR <- citations(M,
field = "article",
sep = ";")
cbind(CR$Cited[1:10])
NetMatrix <- biblioNetwork(M,
analysis = "coupling",
network = "references",
sep = ";")
net <-networkPlot(NetMatrix,
n = 50,
Title = "Bibliographic Coupling Network",
type = "fruchterman",
size.cex = TRUE,
size = 20,
remove.multiple = FALSE,
labelsize = 0.7,
edgesize = 10,
edges.min = 5)
NetMatrix <- biblioNetwork(M,
analysis = "co-citation",
network = "references",
sep = ";")
net <-networkPlot(NetMatrix,
n = 50,
Title = "Co-Citation Network",
type = "fruchterman",
size.cex = TRUE,
size = 20,
remove.multiple = FALSE,
labelsize = 0.7,
edgesize = 10,
edges.min = 5)
M <- metaTagExtraction(M, "CR_SO", sep=";")
NetMatrix <- biblioNetwork(M,
analysis = "co-citation",
network = "sources",
sep = ";")
net <-networkPlot(NetMatrix,
n = 50,
Title = "Co-Citation Network",
type = "auto",
size.cex = TRUE,
size = 15,
remove.multiple = FALSE,
labelsize = 0.7,
edgesize = 10,
edges.min = 5)
net$graph
#netstat <- networkStat(NetMatrix)
#summary(netstat, k = 10)
gliblse(net)
glimpse(net)
net$graph
#netstat <- networkStat(NetMatrix)
#summary(netstat, k = 10)
str(net)
net$graph
NetMatrix <- biblioNetwork(M,
analysis = "co-occurrences",
network = "keywords",
sep = ";")
net <- networkPlot(NetMatrix,
normalize = "association",
n = 50,
Title = "Keyword Co-occurrences",
type = "fruchterman",
size.cex = TRUE, size = 20, remove.multiple = FALSE,
edgesize = 10,
labelsize = 3,
label.cex = TRUE,
label.n = 50,
edges.min = 2)
CS <- conceptualStructure(M,
method = "CA",
field = "ID",
minDegree = 10,
k.max = 8,
stemming = FALSE,
labelsize = 8,
documents = 20)
NetMatrix <- biblioNetwork(M,
analysis = "co-occurrences",
network = "keywords",
sep = ";")
S <- normalizeSimilarity(NetMatrix,
type = "association")
net <- networkPlot(S,
n = 500,
Title = "Keyword co-occurrences",
type = "fruchterman",
labelsize = 2,
halo = FALSE,
cluster = "walktrap",
remove.isolates = FALSE,
remove.multiple = FALSE,
noloops = TRUE,
weighted = TRUE,
label.cex = TRUE,
edgesize = 5,
size = 1,
edges.min = 2)
Map <- thematicMap(net, NetMatrix,
S = S,
minfreq =5 )
plot(Map$map)
clusters <-Map$words %>%
arrange(Cluster, desc(Occurrences))
clusters %>%
select(Cluster, Words, Occurrences) %>%
group_by(Cluster) %>%
mutate(n.rel = Occurrences / sum(Occurrences) ) %>%
slice(1:3)
NetMatrix <- biblioNetwork(M %>% filter(!grepl("GESCHWIND", AU)),
analysis = "collaboration",
network = "authors",
sep = ";")
S <- normalizeSimilarity(NetMatrix, type = "jaccard")
net <- networkPlot(S,
n = 50,
Title = "Author collaboration",
type = "auto",
size = 10,
weighted = TRUE,
remove.isolates = TRUE,
size.cex = TRUE,
edgesize = 1,
labelsize = 0.6)
NetMatrix <- biblioNetwork(M,
analysis = "collaboration",
network = "universities",
sep = ";")
net <- networkPlot(NetMatrix,
n = 50,
Title = "Edu collaboration",
type = "auto",
size = 10,
size.cex = T,
edgesize = 3,
labelsize = 0.6)
M <- metaTagExtraction(M,
Field = "AU_CO",
sep = ";")
NetMatrix <- biblioNetwork(M,
analysis = "collaboration",
network = "countries",
sep = ";")
net <- networkPlot(NetMatrix,
n = dim(NetMatrix)[1],
Title = "Country collaboration",
type = "sphere",
cluster = "lovain",
weighted = TRUE,
size = 10,
size.cex = T,
edgesize = 1,
labelsize = 0.6)
g <- net
g
g <- net$graph
g
com <- net$cluster_obj
com$membership
library(ggraph)
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership)))
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g)))
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link()
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "skyblue")) +
geom_node_text(aes(label = name), size = 8, repel = TRUE)
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "skyblue")) +
geom_node_text(aes(label = name), repel = TRUE)
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(color = "skyblue") +
geom_node_text(aes(label = name), repel = TRUE)
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "blue")) +
geom_node_text(aes(label = name), repel = TRUE)
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "blue", alpha = 0.5)) +
geom_node_text(aes(label = name), repel = TRUE)
g
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "blue", alpha = 0.5)) +
geom_node_text(aes(label = name), repel = TRUE) +
labs(title = "Pretty network",
subtitle = "Isn't it?") +
theme_graph()
ggraph(g, layout = "linear") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_arc(alpha = 0.8) +
geom_node_text(aes(label = name), repel = TRUE) +
labs(title = "Pretty network",
subtitle = "Isn't it?") +
theme_graph()
ggraph(g, layout = "fr") +
geom_node_point(aes(color = factor(com$membership), size = degree(g))) +
geom_edge_link(aes(color = "blue", alpha = 0.5)) +
geom_node_text(aes(label = name), repel = TRUE) +
labs(title = "Pretty network",
subtitle = "Isn't it?") +
theme_graph() +
scale_color_brewer(palette = "Set2")
library(shiny) # Essential
library(shinyWidgets) # For dropdownButton()
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
install.packages(c("shinyWidgets", "shinydashboard", "shinyjs", "leaflet", "viridis", "cowplot", "ggrepel", "visNetwork", "DT"))
